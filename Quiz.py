# -*- coding: utf-8 -*-
"""AlviAuliaF_2602182865_Kuis_BE20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qB0g1PPaavgPVbg3NyV-3ZaC-_OpbF1g

Alvi Aulia Fatikha\
2602182865\
BE-20
"""

!pip install biopython

import Bio

from Bio.Seq import Seq

"""#Hamming Distance"""

def hamming_distance(seq1, seq2):
    if len(seq1) != len(seq2):
        raise ValueError("Sequences must be of equal length")
    return sum(el1 != el2 for el1, el2 in zip(seq1, seq2))

def similarity_percentage_hamming(hamming_distance, length):
    return (1 - hamming_distance / length) * 100

# Sequences
seq1 = 'ATGCATGGTGCGCGA'
seq2 = 'ATTTGTGCTCCTGGA'
seq3 = 'TATGTGCTCCTGGAT'

# Hamming Distance
hd_1_2 = hamming_distance(seq1, seq2)
hd_1_3 = hamming_distance(seq1, seq3)
hd_2_3 = hamming_distance(seq2, seq3)

# Calculate similarity percentages
length = len(seq1)

similarity_hamming_1_2 = similarity_percentage_hamming(hd_1_2, length)
similarity_hamming_1_3 = similarity_percentage_hamming(hd_1_3, length)
similarity_hamming_2_3 = similarity_percentage_hamming(hd_2_3, length)

# Print distances and similarities
print("Hamming Distance")
print(f"Between Seq1 and Seq2: {hd_1_2}")
print(f"Between Seq1 and Seq3: {hd_1_3}")
print(f"Between Seq2 and Seq3: {hd_2_3}")

print("\nSimilarity Percentage (Hamming Distance)")
print(f"Similarity between Seq1 and Seq2: {similarity_hamming_1_2:.2f}%")
print(f"Similarity between Seq1 and Seq3: {similarity_hamming_1_3:.2f}%")
print(f"Similarity between Seq2 and Seq3: {similarity_hamming_2_3:.2f}%")

"""#Levenshtein Distance"""

def levenshtein_distance(seq1, seq2):
    size_x = len(seq1) + 1
    size_y = len(seq2) + 1

    # Initialize matrix
    matrix = [[0] * size_y for _ in range(size_x)]
    for x in range(size_x):
        matrix[x][0] = x
    for y in range(size_y):
        matrix[0][y] = y

    # Fill the matrix
    for x in range(1, size_x):
        for y in range(1, size_y):
            if seq1[x-1] == seq2[y-1]:
                matrix[x][y] = matrix[x-1][y-1]
            else:
                matrix[x][y] = min(
                    matrix[x-1][y] + 1,    # Deletion
                    matrix[x][y-1] + 1,    # Insertion
                    matrix[x-1][y-1] + 1   # Substitution
                )
    return matrix[size_x - 1][size_y - 1]

def similarity_percentage_levenshtein(levenshtein_distance, length):
    return (1 - levenshtein_distance / length) * 100

# Sequences
seq1 = 'ATGCATGGTGCGCGA'
seq2 = 'ATTTGTGCTCCTGGA'
seq3 = 'TATGTGCTCCTGGAT'

# Levenshtein Distance
ld_1_2 = levenshtein_distance(seq1, seq2)
ld_1_3 = levenshtein_distance(seq1, seq3)
ld_2_3 = levenshtein_distance(seq2, seq3)

# Calculate similarity percentages
length = len(seq1)

similarity_levenshtein_1_2 = similarity_percentage_levenshtein(ld_1_2, length)
similarity_levenshtein_1_3 = similarity_percentage_levenshtein(ld_1_3, length)
similarity_levenshtein_2_3 = similarity_percentage_levenshtein(ld_2_3, length)

# Print distances and similarities
print("Levenshtein Distance")
print(f"Between Seq1 and Seq2: {ld_1_2}")
print(f"Between Seq1 and Seq3: {ld_1_3}")
print(f"Between Seq2 and Seq3: {ld_2_3}")

print("\nSimilarity Percentage (Levenshtein Distance)")
print(f"Similarity between Seq1 and Seq2: {similarity_levenshtein_1_2:.2f}%")
print(f"Similarity between Seq1 and Seq3: {similarity_levenshtein_1_3:.2f}%")
print(f"Similarity between Seq2 and Seq3: {similarity_levenshtein_2_3:.2f}%")

"""#Dot Plot Function"""

import numpy as np
import matplotlib.pyplot as plt

def dot_plot(seq1, seq2, seq1_label='Sequence 1', seq2_label='Sequence 2'):
    dot_matrix = np.zeros((len(seq1), len(seq2)))
    for i in range(len(seq1)):
        for j in range(len(seq2)):
            if seq1[i] == seq2[j]:
                dot_matrix[i, j] = 1

    fig, ax = plt.subplots()
    ax.imshow(dot_matrix, cmap='Purples', interpolation='none')
    ax.set_facecolor('yellow')
    plt.xlabel(seq2_label)
    plt.ylabel(seq1_label)
    plt.show()

# Dot plots
dot_plot(seq1, seq2)
dot_plot(seq1, seq3, seq2_label='Sequence 3')
dot_plot(seq2, seq3, seq1_label='Sequence 2', seq2_label='Sequence 3')